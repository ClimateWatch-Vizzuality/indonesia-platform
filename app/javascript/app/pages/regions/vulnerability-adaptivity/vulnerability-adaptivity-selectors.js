import { createStructuredSelector, createSelector } from 'reselect';
import castArray from 'lodash/castArray';
import capitalize from 'lodash/capitalize';
import uniq from 'lodash/uniq';
import flatten from 'lodash/flatten';
import { getProvince } from 'selectors/provinces-selectors';
import { getTranslate } from 'selectors/translation-selectors';

const ADAPTATION_CODE = 'Adap_13';
const VULNERABILITY_CLASS_INDICATOR = 'Adap_12';
const ACI_INDEX = 'Adap_11';
const SEI_INDEX = 'Adap_6';
const ACI_INDICATORS = [ 'Adap_7', 'Adap_8', 'Adap_9', 'Adap_10' ];
const SEI_INDICATORS = [ 'Adap_1', 'Adap_2', 'Adap_3', 'Adap_4', 'Adap_5' ];

const getIndicators = ({ indicators }) => indicators && indicators.data;
const getNormalizedIndicators = createSelector([ getProvince, getIndicators ], (
  provinceISO,
  indicators
) =>
  {
    if (!provinceISO || !indicators) return [];

    const getIndicatorName = code =>
      capitalize((indicators.indicators.find(i => i.code === code) || {}).name);
    const indicatorValues = (indicators.values || []).filter(
      ind =>
        ind.location_iso_code3 === provinceISO &&
          ind.indicator_code.startsWith('Adap_') &&
          ind.indicator_code !== ADAPTATION_CODE
    );

    return flatten(
      indicatorValues.map(
        iv =>
          iv.values.map(v => ({
            source: iv.source,
            indicatorCode: iv.indicator_code,
            indicatorName: getIndicatorName(iv.indicator_code),
            year: v.year,
            value: v.value
          }))
      )
    );
  });

const getFieldSelected = field => state => {
  const { query } = state.location;
  if (!query || !query[field]) return getDefaults(state)[field];
  const queryValue = query[field];
  const options = getFilterOptions(state)[field];

  return options && options.find(o => o.value === queryValue);
};

const byYearAndCode = (year, code) => {
  const codes = castArray(code);
  return i => i.year === year && codes.includes(i.indicatorCode);
};

const getVulnerabilityClassIndicator = createSelector(
  [ getNormalizedIndicators, getFieldSelected('year') ],
  (indicators, selectedYear) => {
    if (!indicators || !selectedYear) return {};

    const year = selectedYear.value;

    return indicators.find(byYearAndCode(year, VULNERABILITY_CLASS_INDICATOR));
  }
);

const getIndexData = createSelector(
  [ getNormalizedIndicators, getFieldSelected('year') ],
  (indicators, selectedYear) => {
    if (!indicators || !selectedYear) return {};

    const year = selectedYear.value;

    const aciIndicator = indicators.find(byYearAndCode(year, ACI_INDEX));
    const seiIndicator = indicators.find(byYearAndCode(year, SEI_INDEX));

    return {
      aci: {
        index: aciIndicator.value,
        indexName: aciIndicator.indicatorName,
        values: indicators.filter(byYearAndCode(year, ACI_INDICATORS))
      },
      sei: {
        index: seiIndicator.value,
        indexName: seiIndicator.indicatorName,
        values: indicators.filter(byYearAndCode(year, SEI_INDICATORS))
      }
    };
  }
);

const getYears = createSelector([ getNormalizedIndicators ], indicators => {
  if (!indicators) return null;

  return uniq(
    indicators
      .map(i => i.year)
      .filter(y => y)
  ).sort();
});

const getYearsOptions = createSelector([ getYears ], years => {
  if (!years) return null;

  return years.map(y => ({ label: y.toString(), value: y.toString() }));
});

const getFilterOptions = createStructuredSelector({ year: getYearsOptions });

const getDefaults = createSelector(getFilterOptions, options => ({
  year: options && options.year && options.year[options.year.length - 1]
}));

const getSources = createSelector(
  getNormalizedIndicators,
  indicators => uniq(indicators.map(i => i.source))
);
const getIndicatorCodes = createSelector(
  [ getNormalizedIndicators ],
  indicators => uniq(indicators.map(i => i.indicatorCode))
);
const getDownloadURI = createSelector(
  [ getProvince, getSources, getIndicatorCodes ],
  (provinceISO, sources, indicatorCodes) =>
    `indicators.zip?location=${provinceISO}&code=${indicatorCodes.join(
      ','
    )}&source=${sources.join(',')}`
);

export const getVulnerabilityAdaptivityData = createStructuredSelector({
  t: getTranslate,
  provinceISO: getProvince,
  years: getYearsOptions,
  selectedYear: getFieldSelected('year'),
  vulnerabilityClassIndicator: getVulnerabilityClassIndicator,
  indexData: getIndexData,
  sources: getSources,
  downloadURI: getDownloadURI
});
