import { createStructuredSelector, createSelector } from 'reselect';
import castArray from 'lodash/castArray';
import capitalize from 'lodash/capitalize';
import get from 'lodash/get';
import uniq from 'lodash/uniq';
import { getProvince } from 'selectors/provinces-selectors';
import { getTranslate } from 'selectors/translation-selectors';

const VULNERABILITY_CLASS_INDICATOR = 'Adap_12';
const ACI_INDEX = 'Adap_11';
const SEI_INDEX = 'Adap_6';
const ACI_INDICATORS = [ 'Adap_2', 'Adap_3', 'Adap_7', 'Adap_10' ];
const SEI_INDICATORS = [ 'Adap_2', 'Adap_3', 'Adap_4', 'Adap_5', 'Adap_1' ];

const getIndicators = ({ indicators }) => indicators && indicators.data;
const getProvinceIndicators = createSelector([ getProvince, getIndicators ], (
  provinceISO,
  indicators
) =>
  {
    if (!provinceISO || !indicators) return null;

    return {
      indicators: indicators.indicators,
      values: (indicators.values || []).filter(
        ind => ind.location_iso_code3 === provinceISO
      )
    };
  });

const getFieldSelected = field => state => {
  const { query } = state.location;
  if (!query || !query[field]) return getDefaults(state)[field];
  const queryValue = query[field];
  const options = getFilterOptions(state)[field];

  return options && options.find(o => o.value === queryValue);
};

const getIndicatorValues = (indicators, indicatorCode, year) => {
  const codes = castArray(indicatorCode);
  const indicatorValues = indicators.values.filter(
    i => codes.includes(i.indicator_code)
  );

  return indicatorValues.map(
    iv => (iv.values.find(v => v.year === year) || {}).value
  );
};
const getIndicatorName = (indicators, indicatorCode) =>
  capitalize(
    (indicators.indicators.find(i => i.code === indicatorCode) || {}).name
  );

const getVulnerabilityClassIndicator = createSelector(
  [ getProvinceIndicators, getFieldSelected('year') ],
  (indicators, selectedYear) => {
    if (!indicators || !selectedYear) return {};

    return {
      indicatorName: getIndicatorName(
        indicators,
        VULNERABILITY_CLASS_INDICATOR
      ),
      value: getIndicatorValues(
        indicators,
        VULNERABILITY_CLASS_INDICATOR,
        selectedYear.value
      )[0]
    };
  }
);

const getIndexData = createSelector(
  [ getProvinceIndicators, getFieldSelected('year') ],
  (indicators, selectedYear) => {
    if (!indicators || !selectedYear) return {};

    const year = selectedYear.value;
    const getIndexValues = codes => indicators.values
      .filter(ind => codes.includes(ind.indicator_code))
      .map(iv => ({
        indicatorName: getIndicatorName(indicators, iv.indicator_code),
        value: (iv.values.find(v => v.year === year) || {}).value
      }));

    return {
      aci: {
        index: getIndicatorValues(indicators, ACI_INDEX, year),
        indexName: getIndicatorName(indicators, ACI_INDEX),
        values: getIndexValues(ACI_INDICATORS)
      },
      sei: {
        index: getIndicatorValues(indicators, SEI_INDEX, year),
        indexName: getIndicatorName(indicators, SEI_INDEX),
        values: getIndexValues(SEI_INDICATORS)
      }
    };
  }
);

const getYears = createSelector([ getProvinceIndicators ], indicators => {
  if (!indicators) return null;

  const aciIndicatorValues = indicators.values.filter(
    ind => ACI_INDICATORS.includes(ind.indicator_code)
  );

  return uniq(get(aciIndicatorValues, '[0].values', []).map(v => v.year))
    .sort()
    .reverse();
});

const getYearsOptions = createSelector([ getYears ], years => {
  if (!years) return null;

  return years.map(y => ({ label: y.toString(), value: y.toString() }));
});

const getFilterOptions = createStructuredSelector({ year: getYearsOptions });

const getDefaults = createSelector(getFilterOptions, options => ({
  year: options && options.year && options.year[0]
}));

export const getVulnerabilityAdaptivityData = createStructuredSelector({
  t: getTranslate,
  provinceISO: getProvince,
  years: getYearsOptions,
  selectedYear: getFieldSelected('year'),
  vulnerabilityClassIndicator: getVulnerabilityClassIndicator,
  indexData: getIndexData
});
