import { createStructuredSelector, createSelector } from 'reselect';
import capitalize from 'lodash/capitalize';
import get from 'lodash/get';
import meanBy from 'lodash/meanBy';
import uniq from 'lodash/uniq';
import { getProvince } from 'selectors/provinces-selectors';
import { getTranslate } from 'selectors/translation-selectors';

const VULNERABILITY_CLASS_INDICATOR = 'Adap_12';
const ACI_INDICATORS = [ 'Adap_2', 'Adap_3', 'Adap_7', 'Adap_10' ];
const SEI_INDICATORS = [ 'Adap_2', 'Adap_3', 'Adap_4', 'Adap_5', 'Adap_1' ];

const getIndicators = ({ indicators }) => indicators && indicators.data;
const getProvinceIndicators = createSelector([ getProvince, getIndicators ], (
  provinceISO,
  indicators
) =>
  {
    if (!provinceISO || !indicators) return null;

    return {
      indicators: indicators.indicators,
      values: (indicators.values || []).filter(
        ind => ind.location_iso_code3 === provinceISO
      )
    };
  });

const getVulnerabilityClassIndicators = createSelector(
  [ getProvinceIndicators ],
  indicators =>
    indicators &&
      indicators.values &&
      indicators.values.filter(
        ind => ind.indicator_code === VULNERABILITY_CLASS_INDICATOR
      )
);

const getVulnerabilityClass = createSelector(
  [ getVulnerabilityClassIndicators ],
  indicators => {
    if (!indicators || !indicators.length) return null;

    const indicator = indicators[0];

    return get(indicator, 'values[0].value');
  }
);

const getRadarChartDataSelector = selectedIndicators =>
  createSelector([ getProvinceIndicators, getFieldSelected('year') ], (
    indicators,
    selectedYear
  ) =>
    {
      if (!indicators || !selectedYear) return {};
      const values = indicators.values
        .filter(ind => selectedIndicators.includes(ind.indicator_code))
        .map(ind => ({
          indicatorName: capitalize(
            indicators.indicators.find(i => i.code === ind.indicator_code).name
          ),
          value: ind.values.find(v => v.year === selectedYear.value).value
        }));

      const index = meanBy(values, 'value').toFixed(2);

      return { index, values };
    });

const getYears = createSelector([ getProvinceIndicators ], indicators => {
  if (!indicators) return null;

  const aciIndicatorValues = indicators.values.filter(
    ind => ACI_INDICATORS.includes(ind.indicator_code)
  );

  return uniq(get(aciIndicatorValues, '[0].values', []).map(v => v.year))
    .sort()
    .reverse();
});

const getYearsOptions = createSelector([ getYears ], years => {
  if (!years) return null;

  return years.map(y => ({ label: y.toString(), value: y.toString() }));
});

const getFilterOptions = createStructuredSelector({ year: getYearsOptions });

const getDefaults = createSelector(getFilterOptions, options => ({
  year: options && options.year && options.year[0]
}));

const getFieldSelected = field => state => {
  const { query } = state.location;
  if (!query || !query[field]) return getDefaults(state)[field];
  const queryValue = query[field];
  const options = getFilterOptions(state)[field];

  return options && options.find(o => o.value === queryValue);
};

export const getVulnerabilityAdaptivityData = createStructuredSelector({
  t: getTranslate,
  provinceISO: getProvince,
  years: getYearsOptions,
  selectedYear: getFieldSelected('year'),
  vulnerabilityClass: getVulnerabilityClass,
  aci: getRadarChartDataSelector(ACI_INDICATORS),
  sei: getRadarChartDataSelector(SEI_INDICATORS)
});
