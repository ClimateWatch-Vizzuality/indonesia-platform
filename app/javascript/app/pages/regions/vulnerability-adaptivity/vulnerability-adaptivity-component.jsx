import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import {
  Radar,
  RadarChart,
  PolarGrid,
  ResponsiveContainer,
  PolarAngleAxis,
  PolarRadiusAxis
} from 'recharts';

import { Dropdown } from 'cw-components';
import IndicatorsProvider from 'providers/indicators-provider';
import SectionTitle from 'components/section-title';
import InfoDownloadToolbox from 'components/info-download-toolbox';

import styles from './vulnerability-adaptivity-styles.scss';

const namespace = 'pages.regions.vulnerability-adaptivity';

class VulnerabilityAdaptivity extends PureComponent {
  handleYearChange = selected => {
    const { onFilterChange } = this.props;
    onFilterChange({ year: selected.value });
  };

  renderVulnerabilityClass() {
    const { t, vulnerabilityClass } = this.props;

    return (
      <div className={styles.vulnerabilityClass}>
        {t(`${namespace}.vulnerability-class`)}: {vulnerabilityClass}
      </div>
    );
  }

  renderBox(indexName) {
    const { indexData, selectedYear, t } = this.props;
    const index = indexData[indexName] || {};
    const header = t(`${namespace}.${indexName}-header`);
    const dataFrom = `${t(`${namespace}.data-from`)} ${selectedYear &&
      selectedYear.value}`;

    return (
      <div className={styles.box}>
        <div className={styles.boxHeader}>
          {header}
        </div>
        <div className={styles.boxBody}>
          <ResponsiveContainer
            width={600}
            aspect={4 / 3}
            margin={{ top: 0, right: 10, left: 10, bottom: 0 }}
          >
            <RadarChart data={index.values}>
              <PolarGrid />
              <PolarAngleAxis dataKey="indicatorName" />
              <PolarRadiusAxis domain={[ 0, 1 ]} />
              <Radar
                dataKey="value"
                stroke="#8884d8"
                fill="#8884d8"
                fillOpacity={0.6}
              />
            </RadarChart>
          </ResponsiveContainer>
        </div>
        <div className={styles.boxFooter}>
          <div className={styles.indexValue}>
            {indexName.toUpperCase()}: {index.index}
          </div>
          <div className={styles.indexDate}>
            {dataFrom}
          </div>
        </div>
      </div>
    );
  }

  render() {
    const { years, selectedYear, t } = this.props;

    return (
      <div className={styles.page}>
        <SectionTitle
          title={t(`${namespace}.header`)}
          description={t(`${namespace}.description`)}
        />
        <h2>{t(`${namespace}.sub-header`)}</h2>
        <div className={styles.toolbox}>
          <div className={styles.dropdown}>
            <Dropdown
              key="year"
              label="Year"
              options={years}
              onValueChange={this.handleYearChange}
              value={selectedYear}
              hideResetButton
            />
          </div>
          <InfoDownloadToolbox
            className={{ buttonWrapper: styles.buttonWrapper }}
            slugs=""
            downloadUri=""
          />
        </div>
        {this.renderVulnerabilityClass()}
        <div className={styles.container}>
          {this.renderBox('sei')}
          {this.renderBox('aci')}
        </div>
        <IndicatorsProvider />
      </div>
    );
  }
}

VulnerabilityAdaptivity.propTypes = {
  t: PropTypes.func.isRequired,
  indexData: PropTypes.object.isRequired,
  years: PropTypes.array,
  selectedYear: PropTypes.object,
  vulnerabilityClass: PropTypes.string,
  onFilterChange: PropTypes.func.isRequired
};

VulnerabilityAdaptivity.defaultProps = {
  years: [],
  selectedYear: null,
  vulnerabilityClass: ''
};

export default VulnerabilityAdaptivity;
